{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Lint Checks Motivation As a codebase increases in size and complexity, static analysis checks become a very useful tool in ensuring high quality, bug free code. This repository provides a collection of lint checks based on Android Lint that guard against common pitfalls and bugs that you might encounter in day to day development. See project website for more details. Download Java/Kotlin Lint Checks lintChecks com . uber . lint - checks: lint - checks: x . y . z Android Lint Checks lintChecks com . uber . lint - checks: lint - checks - android: x . y . z RxJava Lint Checks lintChecks com . uber . lint - checks: lint - checks - rxjava: x . y . z License Copyright (C) 2019 Uber Technologies Licensed under the Apache License, Version 2.0 (the License ); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#lint-checks","text":"","title":"Lint Checks"},{"location":"#motivation","text":"As a codebase increases in size and complexity, static analysis checks become a very useful tool in ensuring high quality, bug free code. This repository provides a collection of lint checks based on Android Lint that guard against common pitfalls and bugs that you might encounter in day to day development. See project website for more details.","title":"Motivation"},{"location":"#download","text":"Java/Kotlin Lint Checks lintChecks com . uber . lint - checks: lint - checks: x . y . z Android Lint Checks lintChecks com . uber . lint - checks: lint - checks - android: x . y . z RxJava Lint Checks lintChecks com . uber . lint - checks: lint - checks - rxjava: x . y . z","title":"Download"},{"location":"#license","text":"Copyright (C) 2019 Uber Technologies Licensed under the Apache License, Version 2.0 (the License ); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"CHECKS/","text":"Checks This is an exhaustive list of the lint checks packaged in each module. lint-checks Issue Description Severity Enabled StringFormatNoLocale String.format, when used without a locale can cause crashes when the input text doesn t match the user s locale. Pass a locale to prevent this ambiguity. ERROR true StringToCaseNoLocale Calling String.toLowerCase() or toUpperCase() without specifying an explicit locale is a common source of bugs. The reason for that is that those methods will use the current locale on the user s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for i is not I. If you want the methods to just perform ASCII replacement, for example to convert an enum name, call String.toUpperCase(Locale.US) instead. If you really want to use the current locale, call String.toUpperCase(Locale.getDefault()) instead. ERROR true lint-checks-android Issue Description Severity Enabled SrcCompatUsage Use app:srcCompat instead of android:src for vector drawable compatibility. ERROR true FrameworkPair The framework Pair class implementation has bugs on older versions of Android. You should use the support version instead ( androidx.core.util.Pair ). ERROR false HardcodedValueInXML It s generally good practice not to hardcoded colors and instead use theme attributes. This allows for easy refactoring, multi-theme support and makes sure there aren t too many shades of the same color. Dimensions should use theme attributes or (if they re specific to a feature) local resource references. ERROR true ColorResourceUsage You should use theme attributes that refer to color resources instead of directly using color resources. But, using theme attributes in non-vector drawables causes crashes on 4.x devices. In these cases, you should have one copy of your drawable that directly uses color resources in the drawable folder, and another copy in the drawable-v21 folder that uses a theme attribute. ERROR true GetDrawable Don t use ContextCompat#getDrawable(Context,int), instead use AppCompatResources#getDrawable(Context, int) since it understands how to process vector drawables ERROR true ResCompatGetColorUsage Don t use ResourcesCompat#getColor(Resources,int,Theme), instead use ContextCompat.getColor(Context,int) ERROR true lint-checks-rxjava Issue Description Severity Enabled RxJavaDistinct distinct() works by holding all previous values in memory and only can be used with a bounded observable. In most cases, distinctUntilChanged() works since it only compares against the last emitted item instead of all items. WARNING true RxJavaToSingle single(), singleOrError() and singleElement() will emit an error if there is more than 1 element in the stream. On top of that, single() will not actually emit the element until the stream is completed. This issue is usually mitigated by adding take(1), however this is error prone as developers might forget to do that and the code will still compile and possibly even run without issues for some time. This issue could be easily avoided by using first(), firstOrError() or firstElement() instead. Maybe.toSingle() is disregarding the core idea of Maybe - that the stream can complete without emitting any values. Calling toSingle() on such stream would emit an error. WARNING true","title":"Checks"},{"location":"CHECKS/#checks","text":"This is an exhaustive list of the lint checks packaged in each module.","title":"Checks"},{"location":"CHECKS/#lint-checks","text":"Issue Description Severity Enabled StringFormatNoLocale String.format, when used without a locale can cause crashes when the input text doesn t match the user s locale. Pass a locale to prevent this ambiguity. ERROR true StringToCaseNoLocale Calling String.toLowerCase() or toUpperCase() without specifying an explicit locale is a common source of bugs. The reason for that is that those methods will use the current locale on the user s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for i is not I. If you want the methods to just perform ASCII replacement, for example to convert an enum name, call String.toUpperCase(Locale.US) instead. If you really want to use the current locale, call String.toUpperCase(Locale.getDefault()) instead. ERROR true","title":"lint-checks"},{"location":"CHECKS/#lint-checks-android","text":"Issue Description Severity Enabled SrcCompatUsage Use app:srcCompat instead of android:src for vector drawable compatibility. ERROR true FrameworkPair The framework Pair class implementation has bugs on older versions of Android. You should use the support version instead ( androidx.core.util.Pair ). ERROR false HardcodedValueInXML It s generally good practice not to hardcoded colors and instead use theme attributes. This allows for easy refactoring, multi-theme support and makes sure there aren t too many shades of the same color. Dimensions should use theme attributes or (if they re specific to a feature) local resource references. ERROR true ColorResourceUsage You should use theme attributes that refer to color resources instead of directly using color resources. But, using theme attributes in non-vector drawables causes crashes on 4.x devices. In these cases, you should have one copy of your drawable that directly uses color resources in the drawable folder, and another copy in the drawable-v21 folder that uses a theme attribute. ERROR true GetDrawable Don t use ContextCompat#getDrawable(Context,int), instead use AppCompatResources#getDrawable(Context, int) since it understands how to process vector drawables ERROR true ResCompatGetColorUsage Don t use ResourcesCompat#getColor(Resources,int,Theme), instead use ContextCompat.getColor(Context,int) ERROR true","title":"lint-checks-android"},{"location":"CHECKS/#lint-checks-rxjava","text":"Issue Description Severity Enabled RxJavaDistinct distinct() works by holding all previous values in memory and only can be used with a bounded observable. In most cases, distinctUntilChanged() works since it only compares against the last emitted item instead of all items. WARNING true RxJavaToSingle single(), singleOrError() and singleElement() will emit an error if there is more than 1 element in the stream. On top of that, single() will not actually emit the element until the stream is completed. This issue is usually mitigated by adding take(1), however this is error prone as developers might forget to do that and the code will still compile and possibly even run without issues for some time. This issue could be easily avoided by using first(), firstOrError() or firstElement() instead. Maybe.toSingle() is disregarding the core idea of Maybe - that the stream can complete without emitting any values. Calling toSingle() on such stream would emit an error. WARNING true","title":"lint-checks-rxjava"},{"location":"changelog/","text":"Changelog Version 0.1.0 Initial release","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#version-010","text":"Initial release","title":"Version 0.1.0"},{"location":"code-of-conduct/","text":"Contributor Covenant Code of Conduct Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at . The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project s leadership. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/","title":"Code of Conduct"},{"location":"code-of-conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code-of-conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code-of-conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code-of-conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code-of-conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code-of-conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at . The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project s leadership.","title":"Enforcement"},{"location":"code-of-conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/","title":"Attribution"},{"location":"contributing/","text":"Contributing to Uber s Android Template Uber welcomes contributions of all kinds and sizes. This includes everything from from simple bug reports to large features. Workflow We love GitHub issues! For small feature requests, an issue first proposing it for discussion or demo implementation in a PR suffice. For big features, please open an issue so that we can agree on the direction, and hopefully avoid investing a lot of time on a feature that might need reworking. Small pull requests for things like typos, bug fixes, etc are always welcome. DOs and DON Ts DO follow our coding style DO include tests when adding new features. When fixing bugs, start with adding a test that highlights how the current behavior is broken. DO keep the discussions focused. When a new or related topic comes up it s often better to create new issue than to side track the discussion. DON T submit PRs that alter licensing related files or headers. If you believe there s a problem with them, file an issue and we ll be happy to discuss it. Guiding Principles We allow anyone to participate in our projects. Tasks can be carried out by anyone that demonstrates the capability to complete them Always be respectful of one another. Assume the best in others and act with empathy at all times Collaborate closely with individuals maintaining the project or experienced users. Getting ideas out in the open and seeing a proposal before it s a pull request helps reduce redundancy and ensures we re all connected to the decision making process","title":"Contributing"},{"location":"contributing/#contributing-to-ubers-android-template","text":"Uber welcomes contributions of all kinds and sizes. This includes everything from from simple bug reports to large features.","title":"Contributing to Uber's Android Template"},{"location":"contributing/#workflow","text":"We love GitHub issues! For small feature requests, an issue first proposing it for discussion or demo implementation in a PR suffice. For big features, please open an issue so that we can agree on the direction, and hopefully avoid investing a lot of time on a feature that might need reworking. Small pull requests for things like typos, bug fixes, etc are always welcome.","title":"Workflow"},{"location":"contributing/#dos-and-donts","text":"DO follow our coding style DO include tests when adding new features. When fixing bugs, start with adding a test that highlights how the current behavior is broken. DO keep the discussions focused. When a new or related topic comes up it s often better to create new issue than to side track the discussion. DON T submit PRs that alter licensing related files or headers. If you believe there s a problem with them, file an issue and we ll be happy to discuss it.","title":"DOs and DON'Ts"},{"location":"contributing/#guiding-principles","text":"We allow anyone to participate in our projects. Tasks can be carried out by anyone that demonstrates the capability to complete them Always be respectful of one another. Assume the best in others and act with empathy at all times Collaborate closely with individuals maintaining the project or experienced users. Getting ideas out in the open and seeing a proposal before it s a pull request helps reduce redundancy and ensures we re all connected to the decision making process","title":"Guiding Principles"},{"location":"getting-started/","text":"Getting Started To add lint-checks to your project, simply add the relevant artifact in your app/module s build.gradle file. dependencies { lintChecks com . uber . lint - checks: lint - checks: x . y . z } Lint Modules Here s a list of lint modules that this project provides: Java/Kotlin Lint Checks lintChecks com . uber . lint - checks: lint - checks: x . y . z Android Lint Checks lintChecks com . uber . lint - checks: lint - checks - android: x . y . z RxJava Lint Checks lintChecks com . uber . lint - checks: lint - checks - rxjava: x . y . z The list of individual lint checks in each module can be found here Integrating In An Existing Codebase Integrating new tooling into an existing codebase can be a pain. Luckily, Android Lint makes it easy to start using lint by providing a baseline . A baseline lets you take a snapshot of your project and then uses the snapshot as a baseline for future inspection runs. To create a baseline add the following in your build.gradle file. android { lintOptions { baseline file ( lint-baseline.xml ) } } More info on baselines can be found in the official documentation Enabling/Disabling Lint Checks There are cases when a particular lint check is not applicable to your codebase or when you want to enable a lint check that s disabled by default. You can use Android Lint s lintOptions to customize your own setup. android { lintOptions { // Turns off checks for the issue IDs you specify. disable RxJavaDistinct // Turns on checks for the issue IDs you specify. These checks are in // addition to the default lint checks. enable FrameworkPair } } For more info on lintOptions, take a look at the official documentation","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"To add lint-checks to your project, simply add the relevant artifact in your app/module s build.gradle file. dependencies { lintChecks com . uber . lint - checks: lint - checks: x . y . z }","title":"Getting Started"},{"location":"getting-started/#lint-modules","text":"Here s a list of lint modules that this project provides:","title":"Lint Modules"},{"location":"getting-started/#javakotlin-lint-checks","text":"lintChecks com . uber . lint - checks: lint - checks: x . y . z","title":"Java/Kotlin Lint Checks"},{"location":"getting-started/#android-lint-checks","text":"lintChecks com . uber . lint - checks: lint - checks - android: x . y . z","title":"Android Lint Checks"},{"location":"getting-started/#rxjava-lint-checks","text":"lintChecks com . uber . lint - checks: lint - checks - rxjava: x . y . z The list of individual lint checks in each module can be found here","title":"RxJava Lint Checks"},{"location":"getting-started/#integrating-in-an-existing-codebase","text":"Integrating new tooling into an existing codebase can be a pain. Luckily, Android Lint makes it easy to start using lint by providing a baseline . A baseline lets you take a snapshot of your project and then uses the snapshot as a baseline for future inspection runs. To create a baseline add the following in your build.gradle file. android { lintOptions { baseline file ( lint-baseline.xml ) } } More info on baselines can be found in the official documentation","title":"Integrating In An Existing Codebase"},{"location":"getting-started/#enablingdisabling-lint-checks","text":"There are cases when a particular lint check is not applicable to your codebase or when you want to enable a lint check that s disabled by default. You can use Android Lint s lintOptions to customize your own setup. android { lintOptions { // Turns off checks for the issue IDs you specify. disable RxJavaDistinct // Turns on checks for the issue IDs you specify. These checks are in // addition to the default lint checks. enable FrameworkPair } } For more info on lintOptions, take a look at the official documentation","title":"Enabling/Disabling Lint Checks"}]}